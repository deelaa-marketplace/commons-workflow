name: Deploy to ECS

on:
  workflow_call:
    inputs:
      java-version:
        type: string
        default: "20"
      aws-region:
        type: string
        default: "eu-west-1"
      ecr-repository:
        type: string
        required: false
      ecs-cluster:
        type: string
        required: true
      ecs-service:
        type: string
        required: false
      ecs-task-container:
        type: string
        required: false

env:
  AWS_REGION: ${{ inputs.aws-region }}
  ECR_REPOSITORY: ${{ inputs.ecr-repository || github.event.repository.name }}
  ECS_SERVICE: ${{ inputs.ecs-service || github.event.repository.name }}
  ECS_CLUSTER: ${{ inputs.ecs-cluster }}
  ECS_TASK_DEFINITION: "task-definition.json"
  CONTAINER_NAME: ${{ inputs.ecs-task-container || github.event.repository.name }}

jobs:
  deploy-build:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{inputs.java-version}}
          distribution: "temurin"
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          GITHUB_ACTOR: ${{ secrets.GIT_AGENT_USER }}
          GITHUB_TOKEN: ${{ secrets.GIT_AGENT_TOKEN }}
          BASE_IMAGE: ${{ format('{0}:{1}-jre', 'registry://eclipse-temurin', inputs.java-version) }}
        run: |
          # Build a docker image and push it to ECR so that it can be deployed to ECS. 
          IMAGE_TAG=${GITHUB_SHA:0:7}
          build_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          mvn package com.google.cloud.tools:jib-maven-plugin:build -Dimage=${build_image} -Djib.from.image=$BASE_IMAGE
          echo "image=${build_image}" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_CLUSTER}}-${{ env.ECS_SERVICE}} --query taskDefinition > ${{ env.ECS_TASK_DEFINITION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
